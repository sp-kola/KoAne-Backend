import { Router } from 'express';
import { celebrate, Segments } from 'celebrate';
import { authLocal, authJwt } from '../../services/auth.services';
import * as customerController from './customer.controllers';
import customerValidation from './customer.validations';
const express = require('express')
const fs = require('fs')
const bodyParser = require('body-parser')
const multer = require('multer')
var base64Img = require('base64-img');
// const upload = multer({
//     //dest: 'src/modules/customer/avatar',
//     limits:{
//         fileSize: 100000000 //10Mb
//     },
//     // fileFilter(req,file,cb){
//     //     if(!file.originalname.match(/\.(png|jpg|jpeg)$/)){
//     //         return cb(new Error('Wrong file type'))
//     //     }
//     //     cb(undefined,true)
//     // }
// })

var upload = multer({ dest: 'uploads/' }); 

const routes = new Router();

// routes.use(bodyParser.urlencoded({ extended: true }))
// routes.use(bodyParser.json({ limit: '500MB' }))
// routes.use(express.json({limit: '50mb'}));
// routes.use(express.urlencoded({limit: '50mb'}));
routes.use(bodyParser.json({limit: '50MB', extended: true}));
routes.use(bodyParser.urlencoded({
    limit: '50MB',
    parameterLimit: 10000000,
    extended: true 
  }));

routes.post('/upload',upload.single('fileData'), (req, res,next) => {
    console.log('testing ')
    console.log(req.file);//this will be automatically set by multer
    //console.log(req.body);
    //below code will read the data from the upload folder. Multer will automatically upload the file in that folder with an  autogenerated name
    fs.readFile(req.file.path,(err, contents)=> {
     if (err) {
     console.log('Error: ', err);
     res.status(500);
    }else{
     console.log('File contents ',contents);
     res.status(200);
    }
   });
  });

routes.post('/image',authJwt, async(error,req,res,next) => {

    await console.log('image ',req.body.image)
    var base64Data = req.body.image.replace(/^data:image\/png;base64,/, "");

    require("fs").writeFile("out.png", base64Data, 'base64', function(err) {
        if(err){
            throw err
        }
    });
    await console.log('image written')
    await res.status(200).send()
})

routes.post('/signup', celebrate({
    [Segments.BODY]: customerValidation.signup_Schema,
}), customerController.signUp);

//routes.post('/login', authLocal, customerController.login);

routes.get('/me',authJwt,customerController.me);

routes.patch('/',authJwt,customerController.updateCustomer);

routes.delete('/',authJwt,customerController.deleteCustomer);

routes.post('/avatar',authJwt,customerController.profilePic);


// routes.post('/avatar',authJwt,upload.array(),customerController.profilePic,(error,req,res,next) => {
//     console.log(error)
//     res.status(400).send({error: error.message});
// });


routes.delete('/avatar',authJwt,customerController.deleteProfilePic);

routes.get('/avatar/:id',customerController.getProfilePic);


export default routes;
